View(touchdown.plays)
touchdown.plays <- tracking.example.merged %>% filter(grepl("TOUCHDOWN",playDescription))
touchdown.ids <- unique(touchdown.plays$playId)
touchdown.plays <- tracking.example.merged %>% filter(grepl("TOUCHDOWN",playDescription))
touchdown.ids <- unique(touchdown.plays$playId)
for (i in touchdown.ids) {
play <- tracking.example.merged %>% filter(playId == i)
play.length <- length(unique(play$frame.id))
animate(animate.play(play), fps = 10, nframe = play.length)
}
touchdown.plays <- tracking.example.merged %>% filter(grepl("TOUCHDOWN",playDescription))
touchdown.ids <- unique(touchdown.plays$playId)
for (i in touchdown.ids) {
play <- tracking.example.merged %>% filter(playId == i)
play.length <- length(unique(play$frame.id))
animate(animate.play(play), fps = 10, nframe = play.length)
}
touchdown.plays <- tracking.example.merged %>% filter(grepl("TOUCHDOWN",playDescription))
touchdown.ids <- unique(touchdown.plays$playId)
for (i in touchdown.ids) {
play <- tracking.example.merged %>% filter(playId == i)
play %>% select(playDescription) %>% slice(1)
#play.length <- length(unique(play$frame.id))
#animate(animate.play(play), fps = 10, nframe = play.length)
}
touchdown.plays <- tracking.example.merged %>% filter(grepl("TOUCHDOWN",playDescription))
touchdown.ids <- unique(touchdown.plays$playId)
for (i in touchdown.ids) {
play <- tracking.example.merged %>% filter(playId == i)
play %>% select(playDescription) %>% slice(1)
#play.length <- length(unique(play$frame.id))
#animate(animate.play(play), fps = 10, nframe = play.length)
}
touchdown.plays <- tracking.example.merged %>% filter(grepl("TOUCHDOWN",playDescription))
touchdown.ids <- unique(touchdown.plays$playId)
for (i in touchdown.ids) {
play <- tracking.example.merged %>% filter(playId == i)
#play %>% select(playDescription) %>% slice(1)
#play.length <- length(unique(play$frame.id))
#animate(animate.play(play), fps = 10, nframe = play.length)
}
touchdown.plays <- tracking.example.merged %>% filter(grepl("TOUCHDOWN",playDescription))
touchdown.ids <- unique(touchdown.plays$playId)
touchdown.ids
touchdown.ids[1]
play <- tracking.example.merged %>% filter(playID == touchdown.ids[1])
play <- tracking.example.merged %>% filter(playId == touchdown.ids[1])
play.length <- length(unique(play$frame.id))
animate(animate.play(play), fps = 10, nframe = play.length)
play <- tracking.example.merged %>% filter(playId == touchdown.ids[2])
play.length <- length(unique(play$frame.id))
animate(animate.play(play), fps = 10, nframe = play.length)
play <- tracking.example.merged %>% filter(playId == touchdown.ids[3])
play.length <- length(unique(play$frame.id))
animate(animate.play(play), fps = 10, nframe = play.length)
play <- tracking.example.merged %>% filter(playId == touchdown.ids[4])
play.length <- length(unique(play$frame.id))
animate(animate.play(play), fps = 10, nframe = play.length)
play <- tracking.example.merged %>% filter(playId == touchdown.ids[5])
play.length <- length(unique(play$frame.id))
animate(animate.play(play), fps = 10, nframe = play.length)
games.sum[games.sum$homeTeamAbbr == "NE",]
games.sum[games.sum$homeTeamAbbr == "NE" || games.sum$visitorTeamAbbr == "NE",]
games.sum[games.sum$homeTeamAbbr == "NE" | games.sum$visitorTeamAbbr == "NE",]
games.sum[games.sum$homeTeamAbbr == "NE" | games.sum$visitorTeamAbbr == "NE",]$gameId
# 1. Gather game IDs of all Patriots games
pat.game.ids <- games.sum[games.sum$homeTeamAbbr == "NE" | games.sum$visitorTeamAbbr == "NE",]$gameId
# 2. Merge dataframe after reading all corresponding game files
pgs <- list()
for (game.id in pat.game.ids) {
url <- "https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/tracking_gameId_"
tail <- ".csv"
file.tracking <- paste0(url, game.id, tail)
game.inst <- read_csv(file.tracking)
pgs[[game.id]] <- game.inst
}
# 1. Gather game IDs of all Patriots games
pat.game.ids <- games.sum[games.sum$homeTeamAbbr == "NE" | games.sum$visitorTeamAbbr == "NE",]$gameId
# 2. Merge dataframe after reading all corresponding game files
getPatGame <- function(game.id) {
url <- "https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/tracking_gameId_"
tail <- ".csv"
file.tracking <- paste0(url, game.id, tail)
game.inst <- read_csv(file.tracking)
return(game.inst)
}
pg1 <- getPatGame(pat.game.ids[1])
head(pg1)
# 1. Gather game IDs of all Patriots games
pat.game.ids <- games.sum[games.sum$homeTeamAbbr == "NE" | games.sum$visitorTeamAbbr == "NE",]$gameId
# 2. Merge dataframe after reading all corresponding game files
getPatGame <- function(game.id) {
url <- "https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/tracking_gameId_"
tail <- ".csv"
file.tracking <- paste0(url, game.id, tail)
game.inst <- read_csv(file.tracking)
game.inst.merged <- game.inst %>% inner_join(games.sum) %>% inner_join(plays.sum)
return(game.inst.merged)
}
pg1 <- getPatGame(pat.game.ids[1])
head(pg1)
gr.play.ids <- pg1[pg1$displayName == "Rob Gronkowski",]$playId
gr.plays1 <- pg1[which(gr.play.ids)]
gr.play.ids
unique(gr.play.ids)
gr.play.ids <- pg1[pg1$displayName == "Rob Gronkowski",]$playId
gr.plays1 <- pg1[unique(gr.play.ids),]
head(gr.plays1)
View(gr.plays1)
gr.play.ids <- pg1[pg1$displayName == "Rob Gronkowski",]$playId
gr.plays1 <- pg1[playId %in% unique(gr.play.ids),]
gr.play.ids <- pg1[pg1$displayName == "Rob Gronkowski",]$playId
gr.plays1 <- pg1[pg1$playId %in% unique(gr.play.ids),]
head(gr.plays1)
View(gr.plays1)
unique(gr.plays1$playDescription)
simPlay <- function(play) {
play.length <- length(unique(play$frame.id))
animate(animate.play(play), fps = 10, nframe = play.length)
}
simPlay <- function(df, play.id) {
play <- df %>% filter(playId == play.id)
play.length <- length(unique(play$frame.id))
animate(animate.play(play), fps = 10, nframe = play.length)
}
unique(gr.plays1$playId)
# gather all plays which have passes, maybe even a dataframe with only completed passes
simPlay(gr.plays1, 118)
# gather all plays which have passes, maybe even a dataframe with only completed passes
simPlay(gr.plays1, 629)
# gather all plays which have passes, maybe even a dataframe with only completed passes
simPlay(gr.plays1, 516)
gr.plays1[gr.plays1$playId==516,]$playDescription
unique(gr.plays1[gr.plays1$playId==516,]$playDescription)
# create subframe of just passes
pplay.ids <- gr.plays1[grepl("pass",gr.plays1$playDescription),]$playId
suc.pplay.ids <- gr.plays1[grepl("pass",gr.plays1$playDescription) &
!grepl("incomplete",gr.plays1$playDescription),]$playId
gr.pplays1 <- gr.plays1[gr.plays1$playId %in% unique(pplay.ids),]
gr.spplays1 <- gr.plays1[gr.plays1$playId %in% unique(suc.pplay.ids),]
unique(gr.spplays1)$playId
unique(gr.spplays1$playId)
simPlay(gr.spplays1,94)
simPlay(gr.spplays1,160)
gr.spplays1[gr.spplays1$playId==160,]$playDescription
unique(gr.spplays1$playId)
simPlay(gr.spplays1,210)
simPlay(gr.spplays1,449)
simPlay(gr.spplays1,1025)
simPlay(gr.spplays1,1049)
simPlay(gr.spplays1,1397)
simPlay(gr.spplays1,1464)
simPlay(gr.spplays1,2613)
simPlay(gr.spplays1,2850)
simPlay(gr.spplays1,3081)
simPlay(gr.spplays1,3409)
simPlay(gr.spplays1,3528)
simPlay(gr.spplays1,3776)
simPlay(gr.spplays1,3800)
simPlay(gr.spplays1,3846)
View(gr.spplays1)
unique(gr.plays1$personnel.offense)
count(gr.plays1$personnel.offense)
simPlay(gr.spplays1,210)
file.players <- "https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/players.csv"
players.sum <- read_csv(file.player)
file.players <- "https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/players.csv"
players.sum <- read_csv(file.players)
View(players.sum)
file.players <- "https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/players.csv"
players.sum <- read_csv(file.players)
players.sum <- players[c(1,4)]
file.players <- "https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/players.csv"
players.sum <- read_csv(file.players)
players.sum <- players[,c(1,4)]
file.players <- "https://raw.githubusercontent.com/nfl-football-ops/Big-Data-Bowl/master/Data/players.csv"
players.sum <- read_csv(file.players)
players.sum <- players.sum[,c(1,4)]
View(players.sum)
gr.spplays1 <- merge(gr.spplays1, players.sum)
View(pg1)
# create subframe of just passes
pplay.ids <- gr.plays1[grepl("pass",gr.plays1$playDescription),]$playId
suc.pplay.ids <- gr.plays1[grepl("pass",gr.plays1$playDescription) &
!grepl("incomplete",gr.plays1$playDescription),]$playId
gr.pplays1 <- gr.plays1[gr.plays1$playId %in% unique(pplay.ids),]
gr.spplays1 <- gr.plays1[gr.plays1$playId %in% unique(suc.pplay.ids),]
players.sum$nflId
gr.spplays1$Position <- player.sum[players.sum$nflId == gr.ssplays$nflId]$PositionAbbr
gr.spplays1$Position <- players.sum[players.sum$nflId == gr.ssplays$nflId]$PositionAbbr
gr.spplays1$Position <- players.sum[players.sum$nflId == gr.ssplays1$nflId]$PositionAbbr
gr.spplays1$Position <- players.sum[players.sum$nflId == gr.spplays1$nflId]$PositionAbbr
players.sum[players.sum$nflId == 2552563]
players.sum[players.sum$nflId == 2552563,]
players.sum[players.sum$nflId == 2552563,]$PositionAbbr
gr.spplays1$Position <- players.sum[players.sum$nflId == gr.spplays1$nflId,]$PositionAbbr
gr.spplays1$nflId
any(is.na(gr.spplays1$nflId))
which((is.na(gr.spplays1$nflId)))
gr.spplays1$Position <- ifelse(!(is.na(gr.spplays1$nflId)),
players.sum[players.sum$nflId == gr.spplays1$nflId,]$PositionAbbr,
NA)
View(gr.spplays1)
unique(gr.spplays1$Position)
gr.spplays1$nflId
gr.spplays1[gr.spplays1$nflId==2649,]$Position
# hard code
gr.spplays1$Position <- NA
for (nfl.id in gr.spplays1$nflId) {
gr.spplays1[gr.spplays1$nflId == nfl.id,]$Position <-
players.sum[players.sum$nflId == nfl.id,]$PositionAbbr
}
gr.spplays1$nflId
# hard code
gr.spplays1$Position <- NA
for (nfl.id in gr.spplays1$nflId) {
if (!(is.na(nfl.id))) {
gr.spplays1[gr.spplays1$nflId == nfl.id,]$Position <-
players.sum[players.sum$nflId == nfl.id,]$PositionAbbr
}
}
# hard code
gr.spplays1$Position <- NA
for (nfl.id in gr.spplays1$nflId) {
if (!(is.na(nfl.id))) {
print(nfl.id)
gr.spplays1[gr.spplays1$nflId == nfl.id,]$Position <-
players.sum[players.sum$nflId == nfl.id,]$PositionAbbr
}
}
gr.spplays1[gr.spplays1$nflId==496723,]
gr.spplays1[gr.spplays1$nflId==496723,]$Position
# hard code
gr.spplays1$Position <- NA
for (nfl.id in gr.spplays1$nflId) {
gr.spplays1[!is.na(gr.spplays1$nflId) & gr.spplays1$nflId == nfl.id,]$Position <-
players.sum[players.sum$nflId == nfl.id,]$PositionAbbr
}
unique(gr.spplays1$Position)
View(gr.spplays1)
simPlay(gr.spplays1,94)
max(gr.spplays1$x)
min(gr.spplays1$x)
min(gr.spplays1$y)
max(gr.spplays1$y)
giveDir <- function(dir) {
if (dir > 330 | dir < 30) {
return("W")
} else if (dir >= 30 & dir < 60) {
return("NW")
} else if (dir >= 60 & dir < 120) {
return("N")
} else if (dir >= 120 & dir < 150) {
return("NE")
} else if (dir >= 150 & dir < 210) {
return("E")
} else if (dir >= 210 & dir < 240) {
return("SE")
} else if (dir >= 240 & dir < 300) {
return("S")
} else {
return("SW")
}
}
apply(gr.spplays1$dir, FUN=giveDir)
apply(gr.spplays1$dir, FUN=giveDir)
apply(X=gr.spplays1$dir, FUN=giveDir)
gr.spplays1$dir
length(gr.spplays1$dir)
lapply(X=gr.spplays1$dir, FUN=giveDir)
giveDir <- function(dir) {
if (dir > 330 || dir < 30) {
return("W")
} else if (dir >= 30 & dir < 60) {
return("NW")
} else if (dir >= 60 & dir < 120) {
return("N")
} else if (dir >= 120 & dir < 150) {
return("NE")
} else if (dir >= 150 & dir < 210) {
return("E")
} else if (dir >= 210 & dir < 240) {
return("SE")
} else if (dir >= 240 & dir < 300) {
return("S")
} else {
return("SW")
}
}
lapply(gr.spplays1$dir,giveDir)
giveDir <- function(dir) {
ifelse (dir > 330 | dir < 30, "W",
ifelse(dir >= 30 & dir < 60, "NW",
ifelse(dir >= 60 & dir < 120, "N",
ifelse(dir >= 120 & dir < 150, "NE",
ifelse(dir >= 150 & dir < 210, "E",
ifelse(dir >= 210 & dir < 240, "SE",
ifelse(dir >= 240 & dir < 300, "S", "SW"))))))))
giveDir <- function(dir) {
ifelse (dir > 330 | dir < 30, "W",
ifelse(dir >= 30 & dir < 60, "NW",
ifelse(dir >= 60 & dir < 120, "N",
ifelse(dir >= 120 & dir < 150, "NE",
ifelse(dir >= 150 & dir < 210, "E",
ifelse(dir >= 210 & dir < 240, "SE",
ifelse(dir >= 240 & dir < 300, "S", "SW")))))))
}
lapply(gr.spplays1$dir, giveDir)
gr.spplays1$dirFac <- apply(gr.spplays1$dir, giveDir)
gr.spplays1$dirFac <- lapply(gr.spplays1$dir, giveDir)
View(gr.spplays1)
gr.spplays1[playId==94,]
gr.spplays1[gr.spplays1$playId==94,]
gr.spplays1[gr.spplays1$playId==94,]$x
gr.spplays1[gr.spplays1$playId==94,]$x[1]
gr.spplays1[gr.spplays1$playId==94,]$team
gr.spplays1[gr.spplays1$playId==94,]$team[1]
gr.spplays1[gr.spplays1$playId==94,]$team[2]
gr.spplays1[gr.spplays1$playId==94,]$team[10]
gr.spplays1[gr.spplays1$playId==94,]$team[11]
gr.spplays1[gr.spplays1$playId==94,]$team[1000]
gr.spplays1[gr.spplays1$playId==94,]$team[999]
gr.spplays1[gr.spplays1$playId==94,]$team[990]
gr.spplays1[gr.spplays1$playId==94,]$team[950]
gr.spplays1[gr.spplays1$playId==94,]$team[0]
gr.spplays1[gr.spplays1$playId==94,]$team[1]
gr.spplays1[gr.spplays1$playId==94,]$team[960]
gr.spplays1[gr.spplays1$playId==94,]$team[970]
gr.spplays1[gr.spplays1$playId==94,]$team[980]
gr.spplays1[gr.spplays1$playId==94,]$team[976]
gr.spplays1[gr.spplays1$playId==94,]$team[978]
gr.spplays1[gr.spplays1$playId==94,]$team[979]
gr.spplays1[gr.spplays1$playId==94,]$team[980]
length(gr.spplays1[gr.spplays1$playId==94,])
nrow(gr.spplays1[gr.spplays1$playId==94,])
980*3
980*2
nrow(gr.spplays1[gr.spplays1[gr.spplays1$playId==94,]$team=="football",])
unique(gr.spplays1$team)
nrow(gr.spplays1[gr.spplays1[gr.spplays1$playId==94,]$team=="ball",])
1335 + 1960
gr.spplays1[gr.spplays1$playId==94,]$team[1960]
gr.spplays1[gr.spplays1$playId==94,]$team[1959]
gr.spplays1[gr.spplays1$playId==94,]$team[1958]
gr.spplays1[gr.spplays1$playId==94,]$team[2047]
gr.spplays1[gr.spplays1$playId==94,]$team[2048]
min(which(gr.spplays1[gr.spplays1$playId==94,]$team == "home"))
min(which(gr.spplays1[gr.spplays1$playId==94,]$team == "away"))
min(which(gr.spplays1[gr.spplays1$playId==94,]$team == "ball"))
# compare first x of both away and home team.
giveOffDir <- function(play.id) {
away.ind <- min(which(gr.spplays1[gr.spplays$playId == play.id,]$team == "away"))
home.ind <- min(which(gr.spplays1[gr.spplays$playId == play.id,]$team == "home"))
# compare the x of both
ifelse(gr.spplays1[gr.spplays1$playId==play.id,]$x[away.ind] >
gr.spplays1[gr.spplays1$playId==play.id,]$x[home.ind],
"North", "South")
}
gr.spplays1$OffDir <- lapply(gr.spplays1$playId, giveOffDir)
# compare first x of both away and home team.
giveOffDir <- function(play.id) {
away.ind <- min(which(gr.spplays1[gr.spplays1$playId == play.id,]$team == "away"))
home.ind <- min(which(gr.spplays1[gr.spplays1$playId == play.id,]$team == "home"))
# compare the x of both
ifelse(gr.spplays1[gr.spplays1$playId==play.id,]$x[away.ind] >
gr.spplays1[gr.spplays1$playId==play.id,]$x[home.ind],
"North", "South")
}
gr.spplays1$OffDir <- lapply(gr.spplays1$playId, giveOffDir)
View(gr.spplays1)
simPlay(gr.spplays1,449)
53.3/2
min(which(gr.spplays1[gr.spplays1$playId==449,]$dirFac=="W"))
min(which(gr.spplays1[gr.spplays1$playId==449,]$dirFac=="S"))
gr.spplays1[1,]
gr.spplays1[1,]$Position
unique(gr.spplays1$Position)
"a" %in% ["a","b"]
"a" %in% c("a","b")
unqiue(gr.spplays1$playId)
unique(gr.spplays1$playId)
giveRouteType <- function(df) {
play.ids <- unique(df$playId)
for (play.id in play.ids) {
print(play.id)
}
}
giveRouteType(gr.spplays1)
gr.spplays1[gr.spplays1$playId==449,]
gr.spplays1[gr.spplays1$playId==449,]$Position
gr.spplays1[gr.spplays1$playId==449,]$OffDir
gr.spplays1[gr.spplays1$playId==449,]$Position
gr.spplays1[gr.spplays1$playId==449,]$OffDir[1]
gr.spplays1[gr.spplays1$playId==449,]$OffDir[1] == "South"
min(which(gr.spplays1[gr.spplays1$playId==449,]$Position=="QB")))
min(which(gr.spplays1[gr.spplays1$playId==449,]$Position=="QB"))
min(which(gr.spplays1[gr.spplays1$playId==449,]$Position=="QfewfB"))
# assumes home team is on offense
giveRouteType <- function(df) {
play.ids <- unique(df$playId)
for (play.id in play.ids) {
pl.df <- df[df$playId==play.id,]$nflId
nfl.ids <- unique(pl.df)
for (nfl.id in nfl.ids) {
nfl.pl <- pl.df[pl.df$nflId==nfl.id,]
ifelse(nfl.pl$Position[1] %in% c("WR","TE"),
ifelse(nfl.pl$OffDir[1] == "South",
ifelse("S" %in% nfl.pl$dirFac & "E" %in% nfl.pl$dirFac,
ifelse(min(which(nfl.pl$dirFac=="S")) < min(which(nfl.pl$dirFac=="E")),
"In/Dig", "Not Clear"),
NA),
ifelse("N" %in% nfl.pl$dirFac & "W" %in% nfl.pl$dirFac,
ifelse(min(which(nfl.pl$dirFac=="N")) < min(which(nfl.pl$dirFac=="W")),
"In/Dig", "Not Clear"),
NA)),NA)
}
}
}
giveRouteType(gr.spplays1)
# assumes home team is on offense
giveRouteType <- function(df) {
play.ids <- unique(df$playId)
for (play.id in play.ids) {
pl.df <- df[df$playId==play.id,]
nfl.ids <- unique(pl.df$playId)
for (nfl.id in nfl.ids) {
nfl.pl <- pl.df[pl.df$nflId==nfl.id,]
ifelse(nfl.pl$Position[1] %in% c("WR","TE"),
ifelse(nfl.pl$OffDir[1] == "South",
ifelse("S" %in% nfl.pl$dirFac & "E" %in% nfl.pl$dirFac,
ifelse(min(which(nfl.pl$dirFac=="S")) < min(which(nfl.pl$dirFac=="E")),
"In/Dig", "Not Clear"),
NA),
ifelse("N" %in% nfl.pl$dirFac & "W" %in% nfl.pl$dirFac,
ifelse(min(which(nfl.pl$dirFac=="N")) < min(which(nfl.pl$dirFac=="W")),
"In/Dig", "Not Clear"),
NA)),NA)
}
}
}
giveRouteType(gr.spplays1)
# assumes home team is on offense
giveRouteType <- function(df) {
play.ids <- unique(df$playId)
for (play.id in play.ids) {
pl.df <- df[df$playId==play.id,]
nfl.ids <- unique(pl.df$playId)
for (nfl.id in nfl.ids) {
nfl.pl <- pl.df[pl.df$nflId==nfl.id,]
return(ifelse(nfl.pl$Position[1] %in% c("WR","TE"),
ifelse(nfl.pl$OffDir[1] == "South",
ifelse("S" %in% nfl.pl$dirFac & "E" %in% nfl.pl$dirFac,
ifelse(min(which(nfl.pl$dirFac=="S")) < min(which(nfl.pl$dirFac=="E")),
"In/Dig", "Not Clear"),
NA),
ifelse("N" %in% nfl.pl$dirFac & "W" %in% nfl.pl$dirFac,
ifelse(min(which(nfl.pl$dirFac=="N")) < min(which(nfl.pl$dirFac=="W")),
"In/Dig", "Not Clear"),
NA)),NA))
}
}
}
giveRouteType(gr.spplays1)
# assumes home team is on offense
giveRouteType <- function(df) {
finList = list()
play.ids <- unique(df$playId)
for (play.id in play.ids) {
pl.df <- df[df$playId==play.id,]
nfl.ids <- unique(pl.df$playId)
for (nfl.id in nfl.ids) {
nfl.pl <- pl.df[pl.df$nflId==nfl.id,]
finList <- c(finList, ifelse(nfl.pl$Position[1] %in% c("WR","TE"),
ifelse(nfl.pl$OffDir[1] == "South",
ifelse("S" %in% nfl.pl$dirFac & "E" %in% nfl.pl$dirFac,
ifelse(min(which(nfl.pl$dirFac=="S")) < min(which(nfl.pl$dirFac=="E")),
"In/Dig", "Not Clear"),
NA),
ifelse("N" %in% nfl.pl$dirFac & "W" %in% nfl.pl$dirFac,
ifelse(min(which(nfl.pl$dirFac=="N")) < min(which(nfl.pl$dirFac=="W")),
"In/Dig", "Not Clear"),
NA)),NA))
}
}
return(finList)
}
giveRouteType(gr.spplays1)
# assumes home team is on offense
giveRouteType <- function(df) {
finList = list()
play.ids <- unique(df$playId)
for (play.id in play.ids) {
pl.df <- df[df$playId==play.id,]
nfl.ids <- unique(pl.df$playId)
for (nfl.id in nfl.ids) {
nfl.pl <- pl.df[pl.df$nflId==nfl.id,]
print(nfl.pl)
finList <- c(finList, ifelse(nfl.pl$Position[1] %in% c("WR","TE"),
ifelse(nfl.pl$OffDir[1] == "South",
ifelse("S" %in% nfl.pl$dirFac & "E" %in% nfl.pl$dirFac,
ifelse(min(which(nfl.pl$dirFac=="S")) < min(which(nfl.pl$dirFac=="E")),
"In/Dig", "Not Clear"),
NA),
ifelse("N" %in% nfl.pl$dirFac & "W" %in% nfl.pl$dirFac,
ifelse(min(which(nfl.pl$dirFac=="N")) < min(which(nfl.pl$dirFac=="W")),
"In/Dig", "Not Clear"),
NA)),NA))
}
}
return(finList)
}
giveRouteType(gr.spplays1)
